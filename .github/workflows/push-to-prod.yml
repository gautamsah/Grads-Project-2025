name: Prod Push
run-name: Deploying To Prod, ${{ github.actor }} tiggered GitHub Actions üöÄ
# The workflow will run whenever an event happens on a push request
on:
  # The workflow will run whenever an event happens on a pull request
  push:
    # The branches filter allows to specify that this workflow should only
    # run if the branch name is "develop". This way we prevent this workflow
    # from running when PRs are opened on other branches
    branches: [ main ]
    # We only care about changes to the force-app directory, which is the
    # root directory of the sfdx project. This prevents the job from running
    # when changing non-salesforce files (like this yml file).
    paths:
      - 'force-app/**'
      
permissions:
  actions: read
  contents: read
  security-events: write
  
jobs:
  # This is the name of the job. You can give it whatever name you want
  Explore-GitHub-Actions:
     # This job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version
        # of ubuntu
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch path is ${{ github.ref }}, name is ${{ github.ref_name }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
      
  build:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      # Checkout the Source code from the latest commit
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Upgrade NPM to latest
        run: npm install -g npm@latest
          
      - name: Install Salesforce CLI
        run: |
         npm install @salesforce/cli --global
         sfdx --version

      - name: Install the sfdx-git-delta plugin
        run: |
          echo 'y' | sf plugins install sfdx-git-delta
                    
      - name: Decrypt the server.key.enc file & store inside assets folder
        run: |
          openssl enc -nosalt -aes-256-cbc -d -in ${{ vars.ENCRYPTION_KEY_FILE }} -out ${{ vars.JWT_KEY_FILE }} -base64 -K ${{ secrets.DECRYPTION_KEY }} -iv ${{ secrets.DECRYPTION_IV }}
        # openssl enc -nosalt -aes-256-cbc -d -in ${{ vars.ENCRYPTION_KEY_FILE }} -out ${{ vars.JWT_KEY_FILE }} -base64 -K ${{ secrets.DECRYPTION_KEY }} -iv ${{ secrets.DECRYPTION_IV }}
          
      - name: Authenticate Salesforce ORG
        run: |
          sfdx force:auth:jwt:grant -i ${{ secrets.HUB_CONSUMER_KEY }} -f ${{ vars.JWT_KEY_FILE }} --username ${{ vars.HUB_USER_NAME }}  -a HubOrg
      
      - name: Generate the package.xml for delta files
        run: |
          mkdir changed-sources
          sf sgd source delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/
      
      - name: validate Delta components to Salesforce
        run: |
          sf project deploy start --source-dir "changed-sources/force-app" --target-org HubOrg --test-level NoTestRun
       
      - name: Validate destructive changes (if any)
        run: |
          sf deploy metadata --metadata-dir "changed-sources/destructiveChanges" --target-org HubOrg --test-level NoTestRun
          
